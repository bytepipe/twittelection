#!/usr/bin/perl

use strict;
use warnings;
use 5.010;
use lib 'lib';

use DateTime;
use Scalar::Util qw[blessed];
use Log::Log4perl qw[:easy];

use TwittElection::Twitter;
use TwittElection::Schema;

Log::Log4perl->easy_init($INFO);

my $logger = Log::Log4perl->get_logger;

my $sch = TwittElection::Schema->get_schema;

my $con_rs;

my $delay = 0;

if (@ARGV) {
  $con_rs = $sch->resultset('Constituency')->search({
    mapit_id => \@ARGV,
  });
  $delay = 0;
} else {
  $con_rs = $sch->resultset('Constituency');
}

my $t = TwittElection::Twitter->new(
  traits          => [ 'API::RESTv1_1', 'OAuth' ],
  ssl             => 1,
  consumer_key    => $ENV{TE_TW_API_KEY},
  consumer_secret => $ENV{TE_TW_API_SEC},
);

$t->authorise;

# Here's how this should work.
#
# IF constit has a list id and that list exists
#   Delete all members
# ELSE
#   Create new list
#   Update list name and list id
# END
#
# Insert list members

# Twitter rate limits (https://dev.twitter.com/rest/public/rate-limits)
# show_list : 15 / 15 min
# list_members : 15 / 15 min
# remove_list_members :
# create_list : 
# add_list_member : 

# Some thoughts about a more intelligent approach.
# Add a 'list_updated_timestamp' column to constituency table.
# Only attempt to rebuild list if
#   candidates_updated timestamp > list_updated_timestamp
# Get current list members and current candidate list.
# Only attempt to rebuild Twitter list if these lists differ.
# Update list_updated_timestamp when we update Twitter list.
# 
# Also, need to think about Twitter rate limiting.
# Stop working as soon as we get a rate exceeded response.
# Only attempt to rebuild lists that haven't been rebuilt in the last 24 hours.

foreach my $con ($con_rs->all) {
  $logger->info($con->name . ' (' . $con->mapit_id . ')');

  unless ($con->candidates->count) {
    $logger->info('No candidates found');
    next;
  }

  if ($con->candidates_updated_time <= $con->list_rebuilt_time) {
    $logger->info('No need to rebuild list');
    next;
  }

  if ($delay and $con->list_rebuilt_time > DateTime->now->subtract(days=>1)) {
    $logger->info('List rebuilt too recently');
    next;
  }

  my $list;
  eval {
    if ($con->list_id) {
      $list = $t->show_list({
        owner_screen_name => 'twittelection',
        slug              => $con->list_name,
      });
      if ($list) {
        foreach my $mem (@{$t->list_members({ list_id => $list->{id} })->{users}}) {
          $t->remove_list_members({
            list_id     => $list->{id},
            screen_name => $mem->{screen_name},
          });
        }
      } else {
        $logger->info('Create ' . $con->name);
        $list = $t->create_list({
          owner_screen_name => 'twittelection',
          name => $con->list_name,
        });

        $logger->info($list->{slug});

        $con->update({
          list_name => $list->{slug},
          list_id   => $list->{id},
        });
      }
    } else {
      $logger->info('Create ' . $con->name);
      $list = $t->create_list({
        owner_screen_name => 'twittelection',
        description       => $con->name,
        name => $con->list_name,
      });

      $logger->info($list->{slug});

      # Remove the number that Twitter will sometimes add at the end
      $list->{slug} =~ s/-\d+$//;

      $con->update({
        list_name => $list->{slug},
        list_id   => $list->{id},
      });
    }

    foreach my $cand ($con->candidates) {
      next unless $cand->twitter;
      $logger->info("$list->{id} -> " . $cand->name . ' / ' . $cand->twitter);
      $t->add_list_member({
        list_id     => $list->{id},
        screen_name => $cand->twitter,
      });
    }

    $con->update({
      list_rebuilt_time => DateTime->now,
    });
  };

  if ($@) {
    my $err = $@;
    $logger->logdie($err)
      unless blessed $err and $err->isa('Net::Twitter::Error');
    $logger->logwarn($err->code . ': ' . $err->error . ' (' .
                     $err->message . ')');
    if ($logger->has_twitter_error) {
      $logger->logwarn($err->twitter_error_code . ': ' .
                       $err->twitter_error_text);
    }
    if ($err->code == 429 or $err->code == 403) {
      $logger->logdie('Rate limit exceeded');
    } else {
      next;
    }
  }
}
