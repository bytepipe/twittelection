#!/usr/bin/perl

use strict;
use warnings;
use 5.010;
use lib 'lib';

use DateTime;

use TwittElection::Twitter;
use TwittElection::Schema;

my $sch = TwittElection::Schema->get_schema;

my $con_rs = $sch->resultset('Constituency');

my $t = TwittElection::Twitter->new(
  traits          => [ 'API::RESTv1_1', 'OAuth' ],
  ssl             => 1,
  consumer_key    => $ENV{TE_TW_API_KEY},
  consumer_secret => $ENV{TE_TW_API_SEC},
);

$t->authorise;

# Here's how this should work.
#
# IF constit has a list id and that list exists
#   Delete all members
# ELSE
#   Create new list
#   Update list name and list id
# END
#
# Insert list members

# Twitter rate limits (https://dev.twitter.com/rest/public/rate-limits)
# show_list : 15 / 15 min
# list_members : 15 / 15 min
# remove_list_members :
# create_list : 
# add_list_member : 

# Some thoughts about a more intelligent approach.
# Add a 'list_updated_timestamp' column to constituency table.
# Only attempt to rebuild list if
#   candidates_updated timestamp > list_updated_timestamp
# Get current list members and current candidate list.
# Only attempt to rebuild Twitter list if these lists differ.
# Update list_updated_timestamp when we update Twitter list.
# 
# Also, need to think about Twitter rate limiting.
# Stop working as soon as we get a rate exceeded response.
# Only attempt to rebuild lists that haven't been rebuilt in the last 24 hours.

foreach my $con ($con_rs->all) {
  next unless $con->candidates->count;
  say $con->name;

  if ($con->candidates_updated_time <= $con->list_rebuilt_time) {
    warn "No need to rebuild list\n";
    next;
  }

  if ($con->list_rebuilt_time > DateTime->now->subtract(days=>1)) {
    warn "List rebuilt too recently\n";
  }

  my $list;
  eval {
    if ($con->list_id) {
      $list = $t->show_list({
        owner_screen_name => 'twittelection',
        list_id           => $con->list_id,
      });
      if ($list) {
        foreach my $mem (@{$t->list_members({ list_id => $list->{id} })->{users}}) {
          $t->remove_list_members({
            list_id     => $list->{id},
            screen_name => $mem->{screen_name},
          });
        }
      } else {
        say 'Create ', $con->name;
        $list = $t->create_list({
          owner_screen_name => 'twittelection',
          name => $con->name,
        });

        say $list->{slug};

        $con->update({
          list_name => $list->{slug},
          list_id   => $list->{id},
        });
      }
    } else {
      say 'Create ', $con->name;
      $list = $t->create_list({
        owner_screen_name => 'twittelection',
        name => $con->name,
      });

      say $list->{slug};

      $con->update({
        list_name => $list->{slug},
        list_id   => $list->{id},
      });
    }

    foreach my $cand ($con->candidates) {
      next unless $cand->twitter;
      say "$list->{id} -> ", $cand->name, ' / ', $cand->twitter;
      $t->add_list_member({
        list_id     => $list->{id},
        screen_name => $cand->twitter,
      });
    }

    $con->update({
      list_rebuilt_time => DateTime->now,
    });
  };

  if ($@) {
    if ($@->isa('Net::Twitter::Error') && $@->code == 429) {
      die "Rate limit exceeded\n";
    } else {
      warn "$@\n";
      next;
    }
  }
}
